/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.admin;

import java.awt.Color;
import java.util.ArrayList;
import java.util.UUID;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import model.Admin;
import model.City;
import model.Community;
import model.Doctor;
import model.DoctorDirectory;
import model.Hospital;
import model.House;
import model.MainSystem;

/**
 *
 * @author bharv
 */
public class doctorDetails extends javax.swing.JPanel {

    /**
     * Creates new form doctorDetails
     */
    Admin admin;
    MainSystem rootDataObj;
    Pattern EMAIL_REGEX = Pattern.compile("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?", Pattern.CASE_INSENSITIVE);

    public doctorDetails(Admin admin, MainSystem rootDataObj) {
        this.admin = admin;
        this.rootDataObj = rootDataObj;
        initComponents();
        populateDropdowns();
        populateDoctorTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        Title1 = new javax.swing.JLabel();
        newDoctorNameField = new javax.swing.JTextField();
        newDoctorEmailField = new javax.swing.JTextField();
        newDoctorEmailLabel = new javax.swing.JLabel();
        newDoctorNameLabel = new javax.swing.JLabel();
        newDoctorPhoneLabel = new javax.swing.JLabel();
        newDoctorHouseLabel = new javax.swing.JLabel();
        newDoctorRoadLabel = new javax.swing.JLabel();
        newDoctorRoadField = new javax.swing.JTextField();
        newDoctorHouseField = new javax.swing.JTextField();
        newDoctorPhoneField = new javax.swing.JTextField();
        newDoctorCommunityLabel = new javax.swing.JLabel();
        newDoctorCityLabel = new javax.swing.JLabel();
        SaveBtn1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        ViewButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        search1 = new javax.swing.JLabel();
        searchDoctorField = new javax.swing.JTextField();
        doctorNameLabel = new javax.swing.JLabel();
        doctorEmailLabel = new javax.swing.JLabel();
        doctorPhoneLabel = new javax.swing.JLabel();
        doctorHouseLabel = new javax.swing.JLabel();
        doctorHouseField = new javax.swing.JTextField();
        doctorPhoneField = new javax.swing.JTextField();
        doctorEmailField = new javax.swing.JTextField();
        doctorNameField = new javax.swing.JTextField();
        doctorRoadField = new javax.swing.JTextField();
        doctorCityLabel = new javax.swing.JLabel();
        doctorCommunityLabel = new javax.swing.JLabel();
        doctorRoadLabel = new javax.swing.JLabel();
        UpdateButton = new javax.swing.JButton();
        newDoctorCommunityDropdown = new javax.swing.JComboBox<>();
        newDoctorCityDropdown = new javax.swing.JComboBox<>();
        doctorCommunityDropdown = new javax.swing.JComboBox<>();
        doctorCityDropdown = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        doctorTable = new javax.swing.JTable();
        hospitalLabel = new javax.swing.JLabel();
        hospitalDropdown = new javax.swing.JComboBox<>();
        newDoctorHospitalLabel = new javax.swing.JLabel();
        newDoctorHospitalDropdown = new javax.swing.JComboBox<>();

        Title1.setFont(new java.awt.Font("Tahoma", 0, 26)); // NOI18N
        Title1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title1.setText("Add New Doctor");

        newDoctorNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newDoctorNameFieldActionPerformed(evt);
            }
        });

        newDoctorEmailField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                newDoctorEmailFieldKeyTyped(evt);
            }
        });

        newDoctorEmailLabel.setText("Emaill ID:");

        newDoctorNameLabel.setText("Name:");

        newDoctorPhoneLabel.setText("Phone Number:");

        newDoctorHouseLabel.setText("House Number:");

        newDoctorRoadLabel.setText("Road Name:");

        newDoctorHouseField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newDoctorHouseFieldActionPerformed(evt);
            }
        });

        newDoctorPhoneField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newDoctorPhoneFieldActionPerformed(evt);
            }
        });
        newDoctorPhoneField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                newDoctorPhoneFieldKeyTyped(evt);
            }
        });

        newDoctorCommunityLabel.setText("Community");

        newDoctorCityLabel.setText("City:");

        SaveBtn1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        SaveBtn1.setText("Save Doctor Information");
        SaveBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveBtn1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 26)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("View Doctor Details");

        ViewButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ViewButton.setText("VIEW");
        ViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewButtonActionPerformed(evt);
            }
        });

        DeleteButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        DeleteButton.setForeground(new java.awt.Color(255, 0, 51));
        DeleteButton.setText("DELETE");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        search1.setText("Search Doctor Here:");

        searchDoctorField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchDoctorFieldKeyTyped(evt);
            }
        });

        doctorNameLabel.setText("Name:");

        doctorEmailLabel.setText("Emaill ID:");

        doctorPhoneLabel.setText("Phone Number:");

        doctorHouseLabel.setText("House Number:");

        doctorHouseField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorHouseFieldActionPerformed(evt);
            }
        });

        doctorNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorNameFieldActionPerformed(evt);
            }
        });

        doctorRoadField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorRoadFieldActionPerformed(evt);
            }
        });

        doctorCityLabel.setText("City:");

        doctorCommunityLabel.setText("Community:");

        doctorRoadLabel.setText("Road Name:");

        UpdateButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        UpdateButton.setForeground(new java.awt.Color(0, 204, 51));
        UpdateButton.setText("Update Doctor Information");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        newDoctorCityDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newDoctorCityDropdownActionPerformed(evt);
            }
        });

        doctorCommunityDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorCommunityDropdownActionPerformed(evt);
            }
        });

        doctorCityDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorCityDropdownActionPerformed(evt);
            }
        });

        doctorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Doctor ID", "Name", "Community", "Hospital"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(doctorTable);
        if (doctorTable.getColumnModel().getColumnCount() > 0) {
            doctorTable.getColumnModel().getColumn(0).setResizable(false);
            doctorTable.getColumnModel().getColumn(1).setResizable(false);
            doctorTable.getColumnModel().getColumn(2).setResizable(false);
            doctorTable.getColumnModel().getColumn(3).setResizable(false);
        }

        hospitalLabel.setText("Hospital:");

        newDoctorHospitalLabel.setText("Hospital");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(Title1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(newDoctorHouseLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(newDoctorRoadLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGap(19, 19, 19)
                                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(newDoctorRoadField)
                                                .addComponent(newDoctorHouseField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(newDoctorPhoneLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(newDoctorEmailLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(newDoctorNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(jPanel3Layout.createSequentialGroup()
                                                    .addGap(19, 19, 19)
                                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(newDoctorPhoneField, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                                        .addComponent(newDoctorEmailField)))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(newDoctorNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(newDoctorHospitalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(newDoctorCityLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(newDoctorCommunityLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(newDoctorCityDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(newDoctorCommunityDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(newDoctorHospitalDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(SaveBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(450, 450, 450)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(doctorRoadLabel)
                                                    .addComponent(hospitalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addComponent(doctorRoadField))
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                                        .addGap(2, 2, 2)
                                                        .addComponent(doctorCommunityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addComponent(doctorCityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(hospitalDropdown, 0, 200, Short.MAX_VALUE)
                                                    .addComponent(doctorCommunityDropdown, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(doctorCityDropdown, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(UpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(204, 204, 204)))
                                .addGap(91, 91, 91))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(search1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchDoctorField, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(ViewButton)
                                            .addComponent(DeleteButton))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(doctorHouseLabel)
                                                    .addComponent(doctorPhoneLabel)
                                                    .addComponent(doctorEmailLabel)
                                                    .addComponent(doctorNameLabel))
                                                .addGap(18, 18, 18)
                                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(doctorHouseField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                            .addComponent(doctorPhoneField)
                                                            .addComponent(doctorEmailField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(doctorNameField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 641, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(73, 73, 73))))))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {DeleteButton, ViewButton});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Title1)
                    .addComponent(jLabel2))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(search1)
                            .addComponent(searchDoctorField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                        .addGap(23, 23, 23)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(doctorNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(doctorRoadLabel)
                            .addComponent(doctorRoadField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(doctorNameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(doctorEmailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(doctorCityLabel)
                            .addComponent(doctorCityDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(doctorEmailLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(doctorPhoneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(doctorCommunityDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(doctorCommunityLabel)
                            .addComponent(doctorPhoneLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(doctorHouseField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(doctorHouseLabel))
                            .addComponent(hospitalLabel)
                            .addComponent(hospitalDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addComponent(UpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newDoctorNameLabel)
                            .addComponent(newDoctorNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newDoctorEmailLabel)
                            .addComponent(newDoctorEmailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ViewButton))
                        .addGap(13, 13, 13)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newDoctorPhoneLabel)
                            .addComponent(newDoctorPhoneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DeleteButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newDoctorHouseLabel)
                            .addComponent(newDoctorHouseField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newDoctorRoadLabel)
                            .addComponent(newDoctorRoadField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newDoctorCityLabel)
                            .addComponent(newDoctorCityDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newDoctorCommunityLabel)
                            .addComponent(newDoctorCommunityDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newDoctorHospitalLabel)
                            .addComponent(newDoctorHospitalDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(SaveBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(72, 72, 72))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 39, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void newDoctorNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newDoctorNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newDoctorNameFieldActionPerformed

    private void newDoctorHouseFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newDoctorHouseFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newDoctorHouseFieldActionPerformed

    private void SaveBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveBtn1ActionPerformed
        // TODO add your handling code here:
        try {

            Doctor newDoctor = new Doctor();
            newDoctor.setName(newDoctorNameField.getText());
            newDoctor.setEmailId(newDoctorEmailField.getText());
            newDoctor.setPhoneNumber(Long.parseLong(newDoctorPhoneField.getText()));
            UUID newID = UUID.randomUUID();
            newDoctor.setPersonId(newID);
            newDoctor.setCity(rootDataObj.getRootCityDirectory().get(newDoctorCityDropdown.getSelectedIndex()));
            newDoctor.setCommunity(newDoctor.getCity().getCommunityDirectory().get(newDoctorCommunityDropdown.getSelectedIndex()));
            newDoctor.setHouse(new House(Integer.parseInt(newDoctorHouseField.getText()), newDoctorRoadField.getText()));
            newDoctor.setHospitalName(rootDataObj.getRootHospitalDirectory().get(newDoctorHospitalDropdown.getSelectedIndex()));
            JOptionPane.showMessageDialog(this, "New Doctor saved successfully!");
            newDoctor.getHospitalName().getDoctors().addDoctor(newDoctor);
            populateDoctorTable();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Plase enter correct details", "Error - Incorrect input", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_SaveBtn1ActionPerformed

    private void ViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewButtonActionPerformed
        // TODO add your handling code here:
        int selectedIndex = doctorTable.getSelectedRow();
        if (selectedIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to view", "Error - No selection", JOptionPane.WARNING_MESSAGE);
        } else {
            DefaultTableModel model = (DefaultTableModel) doctorTable.getModel();
            Doctor selectedDoctor = (Doctor) model.getValueAt(selectedIndex, 1);
            displayDetails(selectedDoctor);
        }
    }//GEN-LAST:event_ViewButtonActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        // TODO add your handling code here:
        int selectedIndex = doctorTable.getSelectedRow();
        if (selectedIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to be deleted", "Error - No selection", JOptionPane.WARNING_MESSAGE);
        } else {
            DefaultTableModel model = (DefaultTableModel) doctorTable.getModel();
            Doctor selectedDoctor = (Doctor) model.getValueAt(selectedIndex, 1);
            selectedDoctor.getHospitalName().getDoctors().deleteDoctor(selectedDoctor);
            JOptionPane.showMessageDialog(this, "Doctor is deleted successfully.");
            populateDoctorTable();
        }
        clearFields();
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void doctorHouseFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorHouseFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_doctorHouseFieldActionPerformed

    private void doctorNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_doctorNameFieldActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        // TODO add your handling code here:
        int selectedIndex = doctorTable.getSelectedRow();
        if (selectedIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to view", "Error - No selection", JOptionPane.WARNING_MESSAGE);
        } else {
            DefaultTableModel model = (DefaultTableModel) doctorTable.getModel();
            Doctor selectedDoctor = (Doctor) model.getValueAt(selectedIndex, 1);
            selectedDoctor.setName(doctorNameField.getText());
            selectedDoctor.setEmailId(doctorEmailField.getText());
            selectedDoctor.setPhoneNumber(Long.parseLong(doctorPhoneField.getText()));
            House newHouse = new House();
            newHouse.setHouseNumber(Integer.parseInt(doctorHouseField.getText()));
            newHouse.setRoadName(doctorRoadField.getText());
            selectedDoctor.setHouse(newHouse);
            City selectedCity = rootDataObj.getRootCityDirectory().get(doctorCityDropdown.getSelectedIndex());
            selectedDoctor.setCity(selectedCity);
            selectedDoctor.setCommunity(selectedCity.getCommunityDirectory().get(doctorCommunityDropdown.getSelectedIndex()));
            selectedDoctor.setHospitalName(rootDataObj.getRootHospitalDirectory().get(hospitalDropdown.getSelectedIndex()));
            JOptionPane.showMessageDialog(this, "Doctor updated successfully!");
            clearFields();
            populateDoctorTable();

        }

    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void doctorCommunityDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorCommunityDropdownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_doctorCommunityDropdownActionPerformed

    private void newDoctorCityDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newDoctorCityDropdownActionPerformed
        // TODO add your handling code here:
        City selectedCity = this.rootDataObj.getRootCityDirectory().get(newDoctorCityDropdown.getSelectedIndex());
        newDoctorCommunityDropdown.removeAllItems();
        populateCommunityDropdown(selectedCity);
    }//GEN-LAST:event_newDoctorCityDropdownActionPerformed

    private void doctorCityDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorCityDropdownActionPerformed
        // TODO add your handling code here:
        City selectedCity = this.rootDataObj.getRootCityDirectory().get(doctorCityDropdown.getSelectedIndex());
        doctorCommunityDropdown.removeAllItems();
        populateCommunityDropdown(selectedCity);
    }//GEN-LAST:event_doctorCityDropdownActionPerformed

    private void searchDoctorFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchDoctorFieldKeyTyped
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) doctorTable.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<>(model);
        doctorTable.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(searchDoctorField.getText()));
    }//GEN-LAST:event_searchDoctorFieldKeyTyped

    private void newDoctorEmailFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_newDoctorEmailFieldKeyTyped
        // TODO add your handling code here:
        if (!EMAIL_REGEX.matcher(newDoctorEmailField.getText()).matches()) {
            newDoctorEmailLabel.setForeground(Color.RED);
            newDoctorEmailField.setForeground(Color.RED);
        } else {
            newDoctorEmailLabel.setForeground(Color.BLACK);
            newDoctorEmailField.setForeground(Color.BLACK);

        }
    }//GEN-LAST:event_newDoctorEmailFieldKeyTyped

    private void newDoctorPhoneFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_newDoctorPhoneFieldKeyTyped
        // TODO add your handling code here:
        if (newDoctorPhoneField.getText().length() != 10) {
            newDoctorPhoneField.setForeground(Color.RED);
            newDoctorPhoneLabel.setForeground(Color.RED);
        } else {
            newDoctorPhoneField.setForeground(Color.BLACK);
            newDoctorPhoneLabel.setForeground(Color.BLACK);

        }
    }//GEN-LAST:event_newDoctorPhoneFieldKeyTyped

    private void newDoctorPhoneFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newDoctorPhoneFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newDoctorPhoneFieldActionPerformed

    private void doctorRoadFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorRoadFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_doctorRoadFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DeleteButton;
    private javax.swing.JButton SaveBtn1;
    private javax.swing.JLabel Title1;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JButton ViewButton;
    private javax.swing.JComboBox<String> doctorCityDropdown;
    private javax.swing.JLabel doctorCityLabel;
    private javax.swing.JComboBox<String> doctorCommunityDropdown;
    private javax.swing.JLabel doctorCommunityLabel;
    private javax.swing.JTextField doctorEmailField;
    private javax.swing.JLabel doctorEmailLabel;
    private javax.swing.JTextField doctorHouseField;
    private javax.swing.JLabel doctorHouseLabel;
    private javax.swing.JTextField doctorNameField;
    private javax.swing.JLabel doctorNameLabel;
    private javax.swing.JTextField doctorPhoneField;
    private javax.swing.JLabel doctorPhoneLabel;
    private javax.swing.JTextField doctorRoadField;
    private javax.swing.JLabel doctorRoadLabel;
    private javax.swing.JTable doctorTable;
    private javax.swing.JComboBox<String> hospitalDropdown;
    private javax.swing.JLabel hospitalLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> newDoctorCityDropdown;
    private javax.swing.JLabel newDoctorCityLabel;
    private javax.swing.JComboBox<String> newDoctorCommunityDropdown;
    private javax.swing.JLabel newDoctorCommunityLabel;
    private javax.swing.JTextField newDoctorEmailField;
    private javax.swing.JLabel newDoctorEmailLabel;
    private javax.swing.JComboBox<String> newDoctorHospitalDropdown;
    private javax.swing.JLabel newDoctorHospitalLabel;
    private javax.swing.JTextField newDoctorHouseField;
    private javax.swing.JLabel newDoctorHouseLabel;
    private javax.swing.JTextField newDoctorNameField;
    private javax.swing.JLabel newDoctorNameLabel;
    private javax.swing.JTextField newDoctorPhoneField;
    private javax.swing.JLabel newDoctorPhoneLabel;
    private javax.swing.JTextField newDoctorRoadField;
    private javax.swing.JLabel newDoctorRoadLabel;
    private javax.swing.JLabel search1;
    private javax.swing.JTextField searchDoctorField;
    // End of variables declaration//GEN-END:variables

    private void populateDoctorTable() {
        DefaultTableModel model = (DefaultTableModel) doctorTable.getModel();
        model.setRowCount(0);
        DoctorDirectory tempDoctors = new DoctorDirectory();
        for (Hospital hosp : rootDataObj.getRootHospitalDirectory()) {
            for (Doctor doc : hosp.getDoctors().getDoctors()) {
                if (!tempDoctors.getDoctors().contains(doc)) {
                    tempDoctors.addDoctor(doc);
                }
            }
        }

        for (Doctor doc : tempDoctors.getDoctors()) {
            Object[] row = new Object[4];
            row[0] = doc.getPersonId();
            row[1] = doc; //access this obj for name, data passing for view/edit button
            row[2] = doc.getCommunity();
            row[3] = doc.getHospitalName().toString();
            model.addRow(row);
        }
    }

    private void populateDropdowns() {
        ArrayList<City> cityListOptions = rootDataObj.getRootCityDirectory();
        for (City cityOption : cityListOptions) {
            newDoctorCityDropdown.addItem(cityOption.toString());
            doctorCityDropdown.addItem(cityOption.toString());
        }

        ArrayList<Hospital> hospitalOptions = rootDataObj.getRootHospitalDirectory();
        for (Hospital hospitalOption : hospitalOptions) {
            newDoctorHospitalDropdown.addItem(hospitalOption.toString());
            hospitalDropdown.addItem(hospitalOption.toString());

        }
    }

    private void populateCommunityDropdown(City selectedCity) {
        newDoctorCommunityDropdown.setEnabled(true);
        doctorCommunityDropdown.setEnabled(true);
        for (Community comm : selectedCity.getCommunityDirectory()) {
            newDoctorCommunityDropdown.addItem(comm.toString());
            doctorCommunityDropdown.addItem(comm.toString());
        }
    }

    private void displayDetails(Doctor selectedDoctor) {
        doctorNameField.setText(selectedDoctor.getName());
        doctorEmailField.setText(selectedDoctor.getEmailId());
        doctorPhoneField.setText(Long.toString(selectedDoctor.getPhoneNumber()));
        House selectedHouse = selectedDoctor.getHouse();
        doctorHouseField.setText(Integer.toString(selectedHouse.getHouseNumber()));
        doctorRoadField.setText(selectedHouse.getRoadName());
        doctorCityDropdown.setSelectedIndex(rootDataObj.getRootCityDirectory().indexOf(selectedDoctor.getCity()));
        doctorCommunityDropdown.setSelectedIndex(selectedDoctor.getCity().getCommunityDirectory().indexOf(selectedDoctor.getCommunity()));
        hospitalDropdown.setSelectedIndex(rootDataObj.getRootHospitalDirectory().indexOf(selectedDoctor.getHospitalName()));

    }

    private void clearFields() {
        doctorNameField.setText("");
        doctorEmailField.setText("");
        doctorPhoneField.setText("");
        doctorHouseField.setText("");
        doctorRoadField.setText("");
        doctorCityDropdown.setSelectedIndex(-1);
        doctorCommunityDropdown.setSelectedIndex(-1);
        hospitalDropdown.setSelectedIndex(-1);
    }
}
